package com.nwafu.PISMDB.controller;

import com.nwafu.PISMDB.entity.*;
import com.nwafu.PISMDB.service.*;
import com.nwafu.PISMDB.service.impl.ContributeServiceImpl;
import com.nwafu.PISMDB.service.impl.CorInfoServiceImpl;
import com.nwafu.PISMDB.service.impl.RcomServiceImpl;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

@Controller
@Slf4j
@Api(description = "分子操作Api")
public class CompoundsController {

    private String search_text;  //临时存放待搜索的文本

    @Autowired
    private CompoundsService compoundsService;
    @Autowired
    private TargetsService targetsService;
    @Autowired
    private PathwaysService pathwaysService;
    @Autowired
    private LuceneSearchService luceneSearchService;
    @Autowired
    private FileSearchService fileSearchService;
    @Autowired
    private ConnectServerAndChangeFileService connectServerAndChangeFileService;
    @Autowired // This means to get the bean called userRepository
    private ContributeServiceImpl contributeService;
    @Autowired
    private RcomServiceImpl rcomService;
    @Autowired
    private CorInfoServiceImpl corInfoService;
    // Which is auto-generated by Spring, we will use it to handle the data
    //private UserRepository userRepository;

    @ApiOperation(value = "创建搜索索引", notes = "创建搜索引擎的索引,不要随便调用")
    @RequestMapping(value = "createIndex", method = RequestMethod.GET)
    @ResponseBody
    public Integer createIndex() throws Exception {
        log.info("创建搜索引擎中");
        Integer result = luceneSearchService.createIndex();
        return result;
    }

    @ApiOperation(value = "搜索引擎关键字查找传参", notes = "搜索引擎关键字查找传参")
    @GetMapping("keywordSearch")
    @ResponseBody
    public String searchIndex(@RequestParam String callback, @RequestParam String search_text) throws Exception {
        System.out.println(search_text);
        log.info("搜索引擎关键字查找传参：{}", search_text);
        List<FormatData> compoundsList = luceneSearchService.searchIndex(search_text + "*");
        CallbackResult<List<FormatData>> result = new CallbackResult();
        result.setCallback(callback);
        result.setData(compoundsList);
        return result.changToJsonp();
    }

    @ApiOperation(value = "搜索结果", notes = "搜索结果")
    @RequestMapping(value = "search_result", method = RequestMethod.GET)
    public String xianshi(HttpServletRequest request) {
        System.out.println("sdfsdsdczxcsdczc");
        search_text = request.getParameter("search_text");
        System.out.println(search_text);
        return "Search-sequence-Result";
    }
    @ApiOperation(value = "查询分子数据数量", notes = "查询分子数据数量")
    @GetMapping("getCompoundsCount")
    @ResponseBody
    public String showCompoundsCount(@RequestParam String callback){
        int total = compoundsService.getCompoundsCount();
        CallbackResult result = new CallbackResult();
        result.setCallback(callback);
        result.setData(total);
        return result.changToJsonp();
    }

    @ApiOperation(value = "查询分子数据数量", notes = "查询分子数据数量")
    @GetMapping("getCompoundsCountOfOthers")
    @ResponseBody
    public String showCompoundsCountOthers(@RequestParam String callback){
        int total = compoundsService.getCompoundsCountOfOthers();
        CallbackResult result = new CallbackResult();
        result.setCallback(callback);
        result.setData(total);
        return result.changToJsonp();
    }

    @ApiOperation(value = "查询分子数据格式化", notes = "查询分子数据格式化")
    @GetMapping("browse-C")
    @ResponseBody
    public String showCompoundsPathway(@RequestParam(required = false, name = "pageNum") int pageNum,
                                       @RequestParam(required = false, name = "pageSize") int pageSize,
                                       @RequestParam String callback) {
        //System.out.println(pageSize,startIndex,pageIndex);xx
        List<CompoundsBasic> list1 = compoundsService.FindBasic(pageNum,pageSize);
        List<Compounds> listc = compoundsService.findById(pageNum,pageSize);
        List<String> list2 = compoundsService.FindPathwayID(pageNum,pageSize);
        List<CompoundSupportingInformation> list4 = compoundsService.FindSupportingInformation(pageNum,pageSize);
        int length = list1.size();
        List<CompoundPathways> pathwayList = new ArrayList<>();
        List<Pathways> pathways;
        for (int k = 0; k < length; k++) {
            CompoundPathways compoundPathways = new CompoundPathways();
            List<String> pathwayIDList = null;
            if(list2 != null)
                pathwayIDList = Arrays.asList(list2.get(k).split("%%"));
            //System.out.print(pathwayIDList.size());
            int pathwayNum = pathwayIDList.size();
            pathways = new ArrayList<>();
            for (int j = 0 ; j < pathwayNum; j++){
                Pathways pathway = pathwaysService.getPathwaysByPathwayID(pathwayIDList.get(j));
                pathways.add(pathway);
            }
            compoundPathways.setPismid(list1.get(k).getPismid());
            compoundPathways.setPathwaysList(pathways);
            pathwayList.add(compoundPathways);
        }
        List<FormatData> list = new ArrayList<>();
        for (int i = 0; i < length; i++) {
            FormatData formatData = new FormatData();
            RelatedCompounds compoundsRelatedCompounds = new RelatedCompounds();
            CompoundDataSource compoundDataSource = new CompoundDataSource();
            compoundDataSource.setChemSpider(listc.get(i).getChemSpider());
            compoundDataSource.setPubChem(listc.get(i).getPubChem());
            formatData.setId(list1.get(i).getPismid());
            formatData.setIdLink(list1.get(i).getPismid());
            formatData.setName(listc.get(i).getChemicalNames());
            formatData.setImgurl(listc.get(i).getStructure());
            formatData.setBasic(list1.get(i));
            compoundsRelatedCompounds.setPismid(list1.get(i).getPismid());
            compoundsRelatedCompounds.setCompoundsList(compoundsService.findRelatedCompound(list1.get(i).getPismid()));
            formatData.setRelatedCompounds(compoundsRelatedCompounds);
            formatData.setPathways(pathwayList.get(i));
            formatData.setSupporting(list4.get(i));
            formatData.setCompoundDataSource(compoundDataSource);
            list.add(formatData);
        }

        CallbackResult<List<FormatData>> result = new CallbackResult();
        result.setCallback(callback);
        result.setData(list);
        return result.changToJsonp();
    }

    @ApiOperation(value = "查询分子数据格式化", notes = "查询分子数据格式化")
    @GetMapping("others")
    @ResponseBody
    public String showCompoundsOtherPathway(@RequestParam(required = false, name = "pageNum") int pageNum,
                                       @RequestParam(required = false, name = "pageSize") int pageSize,
                                       @RequestParam String callback) {
        //System.out.println(pageSize,startIndex,pageIndex);xx
        List<CompoundsBasic> list1 = compoundsService.FindBasicOfOthers(pageNum,pageSize);
        List<Compounds> listc = compoundsService.findCompoundsOfOthers(pageNum,pageSize);
        List<CompoundSupportingInformation> list4 = compoundsService.FindSupportingInformationOfOthers(pageNum,pageSize);
        int length = list1.size();
        List<FormatData> list = new ArrayList<>();
        for (int i = 0; i < length; i++) {
            FormatData formatData = new FormatData();
            RelatedCompounds compoundsRelatedCompounds = new RelatedCompounds();
            CompoundDataSource compoundDataSource = new CompoundDataSource();
            compoundDataSource.setChemSpider(listc.get(i).getChemSpider());
            compoundDataSource.setPubChem(listc.get(i).getPubChem());
            formatData.setId(list1.get(i).getPismid());
            formatData.setIdLink(list1.get(i).getPismid());
            formatData.setName(listc.get(i).getChemicalNames());
            formatData.setImgurl(listc.get(i).getStructure());
            formatData.setBasic(list1.get(i));
            compoundsRelatedCompounds.setPismid(list1.get(i).getPismid());
            compoundsRelatedCompounds.setCompoundsList(compoundsService.findRelatedCompound(list1.get(i).getPismid()));
            formatData.setRelatedCompounds(compoundsRelatedCompounds);
            formatData.setSupporting(list4.get(i));
            formatData.setCompoundDataSource(compoundDataSource);
            list.add(formatData);
        }

        CallbackResult<List<FormatData>> result = new CallbackResult();
        result.setCallback(callback);
        result.setData(list);
        return result.changToJsonp();
    }

    @ApiOperation(value = "查分子的相关分子测试", notes = "查分子的相关分子测试")
    @GetMapping("related")
    @ResponseBody
    public String related(@RequestParam String callback, @Param("pismid") String pismid) {
        List<String> stringList = compoundsService.findRelatedById(pismid);
        CallbackResult<List<String>> result = new CallbackResult();
        result.setCallback(callback);
        result.setData(stringList);
        return result.changToJsonp();
    }

    @ApiOperation(value = "系统首页", notes = "跳转到系统的首页")
    @GetMapping("index")
    public String getCount() {
        return "index";
    }

    @ApiOperation(value = "test", notes = "跳转到系统的首页")
    @GetMapping("smg")
    public String getSmg() {
        return "smg";
    }

    @ApiOperation(value = "跳转到分子页面", notes = "跳转到分子页面")
    @GetMapping("Browse_C")
    public String Browse_C() {
        return "browse-Compound";
    }

    @ApiOperation(value = "跳转到Others分子页面", notes = "跳转到分子页面")
    @GetMapping("Others_pathway")
    public String Browse_Others() {
        return "CompoundsOthers";
    }

    @ApiOperation(value = "跳转到Search_text页面", notes = "跳转到Search_text页面")
    @GetMapping("Search_text")
    public String Search_text() {
        return "search-text";
    }

    @ApiOperation(value = "跳转到Search_text页面", notes = "跳转到Search_text页面")
    @GetMapping("Search_text_result")
    public String Search_text_result(@Param("search_text") String search_text) {
        return "Search-text-Result";
    }

    @ApiOperation(value = "跳转到Search_sequence页面", notes = "跳转到Search_sequence页面")
    @GetMapping("Search_Structure")
    public String Search_Structure() {
        return "Search-Structure";
    }

    @ApiOperation(value = "跳转到结构搜索结果页面", notes = "跳转到结构搜索结果页面")
    @PostMapping("Search_structure_result")
    public String Search_structure_result(@RequestParam("lefile") MultipartFile lefile, @RequestParam("min2") String min2, @RequestParam("fingerprint2") String fingerprint2, Model model) {
        if (lefile.isEmpty()) {
            log.info("文件为空，上传失败");
        }
        String type = lefile.getOriginalFilename().split("\\.")[1];
        String fileName = lefile.getOriginalFilename().split("\\.")[0] + System.currentTimeMillis() + "." + type;
        String filePath = "/home/songmg/SMART/apache-tomcat-9.0.34/webapps/SMART/WEB-INF/classes/dragon/txt/";
        File newFile = new File(filePath + fileName);
        try {
            lefile.transferTo(newFile);
            log.info("上传成功！");
        } catch (IOException e) {
            e.printStackTrace();
        }
        model.addAttribute("min1", min2);
        model.addAttribute("fingerprint",fingerprint2);
        model.addAttribute("lefile1", fileName);
        model.addAttribute("type",type);
        //fileSearchService.useDragonChangeStrutureToDescription(type, fileName.split("\\.")[0]);
        fileSearchService.useDragonCalDescription(fileName,fingerprint2);
        return "Search-Structure-Result";
        //+"&min1="+min1+"&max1="+max1
    }

    @ApiOperation(value = "跳转到结构搜索结果页面", notes = "跳转到结构搜索结果页面")
    @PostMapping("Search_structure_resultBySmile")
    public String Search_structure_resultBySmile(@RequestParam("SMILE-format") String smiles, @RequestParam("min1") String min1, @RequestParam("fingerprint1") String fingerprint1,Model model) {
        System.out.println("smiles:" + smiles);
        String filePath = "/home/songmg/SMART/apache-tomcat-9.0.34/webapps/SMART/WEB-INF/classes/dragon/txt/";
        String fileName = "smile" + System.currentTimeMillis() + ".smiles";
        File newFile = new File(filePath + fileName);
        FileWriter fw = null;
        BufferedWriter bw = null;
        try {
            if (!newFile.exists()) {
                newFile.createNewFile();
            }
            fw = new FileWriter(newFile.getAbsoluteFile(), true);  //true表示可以追加新内容
            //fw=new FileWriter(f.getAbsoluteFile()); //表示不追加
            bw = new BufferedWriter(fw);
            bw.write(smiles);
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        model.addAttribute("min1", min1);
        model.addAttribute("fingerprint",fingerprint1);
        model.addAttribute("lefile1", fileName);
        model.addAttribute("type","smiles");
        //fileSearchService.useDragonChangeStrutureToDescription("smiles", fileName.split("\\.")[0]);
        fileSearchService.useDragonCalDescription(fileName, fingerprint1);
        return "Search-Structure-Result";
        //+"&min1="+min1+"&max1="+max1
    }

    @ApiOperation(value = "对smiles文件计算分子描述符")
    @GetMapping(value = "calsmilesdescription")
    public void calSmilesDescription(){
        List<Compounds>  compoundsList = compoundsService.findById();
        for (Compounds cbi : compoundsList){
            String filePath = "/home/songmg/apache-tomcat-9.0.34/webapps/SMART/WEB-INF/classes/dragon/smile_txt/";
            String fileName = cbi.getPismid() + ".smiles";
            File newFile = new File(filePath + fileName);
            FileWriter fw = null;
            BufferedWriter bw = null;
            try {
                if (!newFile.exists()) {
                    newFile.createNewFile();
                }
                //fw = new FileWriter(newFile.getAbsoluteFile(), true);  //true表示可以追加新内容
                fw=new FileWriter(newFile.getAbsoluteFile()); //表示不追加
                bw = new BufferedWriter(fw);
                bw.write(cbi.getSmiles());
                bw.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            fileSearchService.buildsmilesDescription(cbi.getPismid());
        }
    }

    @ApiOperation(value = "文件上传跳转接口", notes = "跳转到文件上传")
    @GetMapping(value = "greeting")
    public String greetingForm123(Model model) {
        model.addAttribute("compounds", new Temp());
        return "upload";
    }

    static int pid = 1220;

    @ApiOperation(value = "文件上传", notes = "文件上传到数据库")
    @RequestMapping(value = "upload_data", method = RequestMethod.POST)
    public String greetingSubmit(@ModelAttribute Temp compounds/*HttpServletRequest request*/) {
        System.out.println(compounds.toString());
        Temp newCompounds = new Temp();
        newCompounds.setPISMID("M0" + String.valueOf(pid));
        newCompounds.setChemicalNames(compounds.getChemicalNames());
        newCompounds.setIUPAC_Name(compounds.getIUPAC_Name());
        newCompounds.setSmiles(compounds.getSmiles());
        Date d = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd kk:mm:ss ");
        newCompounds.setCreationdate(sdf.format(d));
        //System.out.println("!!!!createtiondate!!!!:" + newCompounds.getPismid() + "!!!!!" + newCompounds.getCreationdate());
        newCompounds.setTempFunction(compounds.getTempFunction());
        newCompounds.setGene(compounds.getGene());
        newCompounds.setUsername(compounds.getUsername());
        newCompounds.setPdbid(compounds.getPdbid());
        newCompounds.setDepartment(compounds.getDepartment());
        newCompounds.setMail(compounds.getMail());
        newCompounds.setProteinname(compounds.getProteinname());
        newCompounds.setUniportid(compounds.getUniportid());
        newCompounds.setPdbid(compounds.getPdbid());
        newCompounds.setSequencel(compounds.getSequencel());
        pid++;
        //System.out.println(newCompounds.getPismid());
        //userRepository.save(newCompounds);
        System.out.println(newCompounds.toString());
        contributeService.save(newCompounds);
        return "results";

    }

    @ApiOperation(value = "更新关联分子")
    @GetMapping("insertCompounds")
    @ResponseBody
    public String inserCompounds(){
        Rcom rcom = new Rcom();
        List<String> molist = pathwaysService.getAllMolecularPISMID();
        int molist_length = molist.size();
        for (int i = 0 ; i < molist_length ; i++){
            List<String> list2 = Arrays.asList(molist.get(i).split("%%"));
            if (list2.size() == 1){
                continue;
            } else {
                for (int j = 0 ; j < list2.size(); j++){
                    List<String> list_tmp = new ArrayList<>(list2);
                    String pid = list_tmp.get(j);
                    list_tmp.remove(j);
                    String moString = String.join("%%",list_tmp);
                    rcom.setPid(pid);
                    rcom.setRelatedcompounds(moString);
                    rcomService.save(rcom);
                }
            }
        }
        return "results";
    }
    @ApiOperation(value = "获取所有文献", notes = "获取所有文献")
    @GetMapping("allReference")
    @ResponseBody
    public String allReference(@RequestParam String callback) {
        List<Reference> referenceList = compoundsService.findReference();
        CallbackResult<List<Reference>> result = new CallbackResult();
        result.setCallback(callback);
        result.setData(referenceList);
        return result.changToJsonp();
    }

    @ApiOperation(value = "根据PISMID获取分子详细信息", notes = "根据PISMID获取分子详细信息")
    @GetMapping("compoundInfomationByPismid")
    @ResponseBody
    public String compoundInfomation(@RequestParam String callback, @Param("pismid") String pismid) {
        //set compounds
        Compounds compounds = compoundsService.findByPISMID(pismid);
        DetailFormatData detailFormatData = new DetailFormatData();
        detailFormatData.setCompounds(compounds);

        //set correction list
        List<CorInfo> corInfoList = corInfoService.findByPismid(pismid);
        detailFormatData.setCorInfoList(corInfoList);
        //set pathway list
        List<Pathways> pathwaysList = new ArrayList<>();
        List<String> pathwayIDList = Arrays.asList(compounds.getPathwayId().split("%%"));
        for(int i = 0; i < pathwayIDList.size() ; i ++){
            Pathways pathway = pathwaysService.getPathwaysByPathwayID(pathwayIDList.get(i));
            pathwaysList.add(pathway);
        }
        detailFormatData.setPathwaysList(pathwaysList);

        //set reference list
        List<Reference> referenceList = new ArrayList<>();
        List<String> referenceIDList = Arrays.asList(compounds.getReferenceId().split("%%"));
        for(int j = 0; j < referenceIDList.size() ; j ++){
            Reference reference = compoundsService.findReferenceById(referenceIDList.get(j));
            referenceList.add(reference);
        }
        detailFormatData.setReferenceList(referenceList);

        //set relatedcompound list
        List<RelatedCompound> compoundsList = new ArrayList<>();
        compoundsList = compoundsService.findRelatedCompound(compounds.getPismid());
        detailFormatData.setCompoundsList(compoundsList);


        //set target list
        List<Targets> targetsList = new ArrayList<>();
        if(compounds.getTargetId() != null){
            List<String> targetIDList = Arrays.asList(compounds.getTargetId().split("%%"));
            for(int k = 0; k < targetIDList.size() ; k ++){
                Targets targets = targetsService.findTargetByTargetID(targetIDList.get(k));
                targetsList.add(targets);
            }
        }
        detailFormatData.setTargetsList(targetsList);

        CallbackResult<DetailFormatData> result = new CallbackResult();
        result.setCallback(callback);
        result.setData(detailFormatData);
        return result.changToJsonp();
    }



    @GetMapping("compoundsAndprotein")
    @ResponseBody
    public String compoundsAndprotein(@RequestParam String callback, @Param("pismid") String pismid){
        //set compounds
        Compounds compounds = compoundsService.findByPISMID(pismid);
        DetailFormatData detailFormatData = new DetailFormatData();
        detailFormatData.setCompounds(compounds);

        //set pathway list
        List<Pathways> pathwaysList = new ArrayList<>();
        List<String> pathwayIDList = Arrays.asList(compounds.getPathwayId().split("%%"));
        for(int i = 0; i < pathwayIDList.size() ; i ++){
            Pathways pathway = pathwaysService.getPathwaysByPathwayID(pathwayIDList.get(i));
            pathwaysList.add(pathway);
        }
        detailFormatData.setPathwaysList(pathwaysList);

        //set reference list
        List<Reference> referenceList = new ArrayList<>();
        List<String> referenceIDList = Arrays.asList(compounds.getReferenceId().split("%%"));
        for(int j = 0; j < referenceIDList.size() ; j ++){
            Reference reference = compoundsService.findReferenceById(referenceIDList.get(j));
            referenceList.add(reference);
        }
        detailFormatData.setReferenceList(referenceList);

        //set relatedcompound list
        List<RelatedCompound> compoundsList = new ArrayList<>();
        compoundsList = compoundsService.findRelatedCompound(compounds.getPismid());
        detailFormatData.setCompoundsList(compoundsList);


        //set target list
        List<Targets> targetsList = new ArrayList<>();
        if(compounds.getTargetId() != null){
            List<String> targetIDList = Arrays.asList(compounds.getTargetId().split("%%"));
            for(int k = 0; k < targetIDList.size() ; k ++){
                Targets targets = targetsService.findTargetByTargetID(targetIDList.get(k));
                targetsList.add(targets);
            }
        }
        detailFormatData.setTargetsList(targetsList);
        detailFormatData.setAllTargets(targetsService.findAllTargetsName());
        CallbackResult<DetailFormatData> result = new CallbackResult();
        result.setCallback(callback);
        result.setData(detailFormatData);
        return result.changToJsonp();
    }

    @ApiOperation(value = "detail", notes = "detail")
    @GetMapping("cdetail")
    public String cdetail(@Param("pismid") String pismid) {
        return "detail";
    }


    @ApiOperation(value = "tdetail", notes = "tdetail")
    @GetMapping("tdetail")
    public String tdetail(@Param("ptid") String ptid) {
        return "ptdetail";
    }

    @GetMapping("correction")
    public String correct(@Param("corid") String corid){
        return "correction";
    }
    /**
     * 结构搜索
     */
    @GetMapping("contructSearch")
    @ResponseBody
    public String seqStructureByStr(@RequestParam String callback,
                                    @RequestParam String min1, @RequestParam String fingerprint,@RequestParam String lefile,@RequestParam String type) {
        log.info("最小阈值:" + min1);
/*        log.info("最大阈值:" + max1);*/
        log.info("最大阈值:" + lefile);
        //List<FormatData> compoundsList = fileSearchService.structureSearch(lefile, min1, type);
        List<FormatData> compoundsList = fileSearchService.structureSearchAllType(lefile, min1, fingerprint);
        CallbackResult<List<FormatData>> result = new CallbackResult();
        result.setCallback(callback);
        result.setData(compoundsList);
        return result.changToJsonp();
    }

    //将所有的分子描述符插入到数据库中
    @GetMapping("chaifTest")
    @ResponseBody
    public String chaifTest() {
        String path = "H:\\bysj\\pismdb_dragon_descriptors.txt";
        String res = "";
        String oneLine = "";
        String temp = "";
        File file = new File(path);
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            int line = 1;
            String pismid = "";
            while ((temp = br.readLine()) != null) {
                if (line == 1) {
                    oneLine = temp;
                } else {
                    res = oneLine + temp;
                    String[] a = res.split("\t");
                    List<String> b = new ArrayList<>();
                    int j = 0;
                    for (int i = 0; i < a.length; i++) {
                        if (i >= 5273) {
                            b.add(a[i]);
                            j++;
                        }
                        pismid = a[5272];
                    }
                    // compoundsService.addselectIdAndDescription(pismid,res);
                    System.out.println(res);
                }
                line++;
            }
            br.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return res;
    }

    @ApiOperation(value = "跳转到文献页面", notes = "跳转到文献页面")
    @GetMapping("reference")
    public String reference() {
        return "reference";
    }

    @ApiOperation(value = "跳转到citingus页面", notes = "跳转到citingus页面")
    @GetMapping("citingus")
    public String citingus() {
        return "citing_us";
    }

    @ApiOperation(value = "跳转到help页面", notes = "跳转到help页面")
    @GetMapping("help")
    public String help() {
        return "help";
    }


    @ApiOperation(value = "库存信息量", notes = "库存信息量")
    @GetMapping("InformationCount")
    @ResponseBody
    public String Informationcount(@RequestParam String callback) {
        List<Integer> list = new ArrayList<>();
        list.add(compoundsService.getCompoundsCount());
        list.add(targetsService.getTargetsCount());
        list.add(pathwaysService.getPathwaysCount());
        CallbackResult<List<Integer>> result = new CallbackResult();
        result.setCallback(callback);
        result.setData(list);
        return result.changToJsonp();
    }
}

